// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: context.proto

#ifndef PROTOBUF_context_2eproto__INCLUDED
#define PROTOBUF_context_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace kea {
namespace rpc {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_context_2eproto();
void protobuf_AssignDesc_context_2eproto();
void protobuf_ShutdownFile_context_2eproto();

class ContextMsg;

enum ContextMsg_RequestType {
  ContextMsg_RequestType_Discover = 0,
  ContextMsg_RequestType_Request = 1,
  ContextMsg_RequestType_Release = 2,
  ContextMsg_RequestType_Decline = 3,
  ContextMsg_RequestType_ConflictIP = 4,
  ContextMsg_RequestType_ContextMsg_RequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ContextMsg_RequestType_ContextMsg_RequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ContextMsg_RequestType_IsValid(int value);
const ContextMsg_RequestType ContextMsg_RequestType_RequestType_MIN = ContextMsg_RequestType_Discover;
const ContextMsg_RequestType ContextMsg_RequestType_RequestType_MAX = ContextMsg_RequestType_ConflictIP;
const int ContextMsg_RequestType_RequestType_ARRAYSIZE = ContextMsg_RequestType_RequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ContextMsg_RequestType_descriptor();
inline const ::std::string& ContextMsg_RequestType_Name(ContextMsg_RequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ContextMsg_RequestType_descriptor(), value);
}
inline bool ContextMsg_RequestType_Parse(
    const ::std::string& name, ContextMsg_RequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ContextMsg_RequestType>(
    ContextMsg_RequestType_descriptor(), name, value);
}
// ===================================================================

class ContextMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kea.ContextMsg) */ {
 public:
  ContextMsg();
  virtual ~ContextMsg();

  ContextMsg(const ContextMsg& from);

  inline ContextMsg& operator=(const ContextMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContextMsg& default_instance();

  void Swap(ContextMsg* other);

  // implements Message ----------------------------------------------

  inline ContextMsg* New() const { return New(NULL); }

  ContextMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContextMsg& from);
  void MergeFrom(const ContextMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContextMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ContextMsg_RequestType RequestType;
  static const RequestType Discover =
    ContextMsg_RequestType_Discover;
  static const RequestType Request =
    ContextMsg_RequestType_Request;
  static const RequestType Release =
    ContextMsg_RequestType_Release;
  static const RequestType Decline =
    ContextMsg_RequestType_Decline;
  static const RequestType ConflictIP =
    ContextMsg_RequestType_ConflictIP;
  static inline bool RequestType_IsValid(int value) {
    return ContextMsg_RequestType_IsValid(value);
  }
  static const RequestType RequestType_MIN =
    ContextMsg_RequestType_RequestType_MIN;
  static const RequestType RequestType_MAX =
    ContextMsg_RequestType_RequestType_MAX;
  static const int RequestType_ARRAYSIZE =
    ContextMsg_RequestType_RequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RequestType_descriptor() {
    return ContextMsg_RequestType_descriptor();
  }
  static inline const ::std::string& RequestType_Name(RequestType value) {
    return ContextMsg_RequestType_Name(value);
  }
  static inline bool RequestType_Parse(const ::std::string& name,
      RequestType* value) {
    return ContextMsg_RequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .kea.ContextMsg.RequestType requestType = 1;
  void clear_requesttype();
  static const int kRequestTypeFieldNumber = 1;
  ::kea::rpc::ContextMsg_RequestType requesttype() const;
  void set_requesttype(::kea::rpc::ContextMsg_RequestType value);

  // optional uint32 subnetID = 2;
  void clear_subnetid();
  static const int kSubnetIDFieldNumber = 2;
  ::google::protobuf::uint32 subnetid() const;
  void set_subnetid(::google::protobuf::uint32 value);

  // optional bytes clientID = 3;
  void clear_clientid();
  static const int kClientIDFieldNumber = 3;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  void set_clientid(const char* value);
  void set_clientid(const void* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // optional bytes mac = 4;
  void clear_mac();
  static const int kMacFieldNumber = 4;
  const ::std::string& mac() const;
  void set_mac(const ::std::string& value);
  void set_mac(const char* value);
  void set_mac(const void* value, size_t size);
  ::std::string* mutable_mac();
  ::std::string* release_mac();
  void set_allocated_mac(::std::string* mac);

  // optional uint32 requestAddr = 5;
  void clear_requestaddr();
  static const int kRequestAddrFieldNumber = 5;
  ::google::protobuf::uint32 requestaddr() const;
  void set_requestaddr(::google::protobuf::uint32 value);

  // optional string hostName = 6;
  void clear_hostname();
  static const int kHostNameFieldNumber = 6;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);

  // @@protoc_insertion_point(class_scope:kea.ContextMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int requesttype_;
  ::google::protobuf::uint32 subnetid_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::google::protobuf::internal::ArenaStringPtr mac_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  ::google::protobuf::uint32 requestaddr_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_context_2eproto();
  friend void protobuf_AssignDesc_context_2eproto();
  friend void protobuf_ShutdownFile_context_2eproto();

  void InitAsDefaultInstance();
  static ContextMsg* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ContextMsg

// optional .kea.ContextMsg.RequestType requestType = 1;
inline void ContextMsg::clear_requesttype() {
  requesttype_ = 0;
}
inline ::kea::rpc::ContextMsg_RequestType ContextMsg::requesttype() const {
  // @@protoc_insertion_point(field_get:kea.ContextMsg.requestType)
  return static_cast< ::kea::rpc::ContextMsg_RequestType >(requesttype_);
}
inline void ContextMsg::set_requesttype(::kea::rpc::ContextMsg_RequestType value) {
  
  requesttype_ = value;
  // @@protoc_insertion_point(field_set:kea.ContextMsg.requestType)
}

// optional uint32 subnetID = 2;
inline void ContextMsg::clear_subnetid() {
  subnetid_ = 0u;
}
inline ::google::protobuf::uint32 ContextMsg::subnetid() const {
  // @@protoc_insertion_point(field_get:kea.ContextMsg.subnetID)
  return subnetid_;
}
inline void ContextMsg::set_subnetid(::google::protobuf::uint32 value) {
  
  subnetid_ = value;
  // @@protoc_insertion_point(field_set:kea.ContextMsg.subnetID)
}

// optional bytes clientID = 3;
inline void ContextMsg::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContextMsg::clientid() const {
  // @@protoc_insertion_point(field_get:kea.ContextMsg.clientID)
  return clientid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContextMsg::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kea.ContextMsg.clientID)
}
inline void ContextMsg::set_clientid(const char* value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kea.ContextMsg.clientID)
}
inline void ContextMsg::set_clientid(const void* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kea.ContextMsg.clientID)
}
inline ::std::string* ContextMsg::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:kea.ContextMsg.clientID)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContextMsg::release_clientid() {
  // @@protoc_insertion_point(field_release:kea.ContextMsg.clientID)
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContextMsg::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:kea.ContextMsg.clientID)
}

// optional bytes mac = 4;
inline void ContextMsg::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContextMsg::mac() const {
  // @@protoc_insertion_point(field_get:kea.ContextMsg.mac)
  return mac_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContextMsg::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kea.ContextMsg.mac)
}
inline void ContextMsg::set_mac(const char* value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kea.ContextMsg.mac)
}
inline void ContextMsg::set_mac(const void* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kea.ContextMsg.mac)
}
inline ::std::string* ContextMsg::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:kea.ContextMsg.mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContextMsg::release_mac() {
  // @@protoc_insertion_point(field_release:kea.ContextMsg.mac)
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContextMsg::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:kea.ContextMsg.mac)
}

// optional uint32 requestAddr = 5;
inline void ContextMsg::clear_requestaddr() {
  requestaddr_ = 0u;
}
inline ::google::protobuf::uint32 ContextMsg::requestaddr() const {
  // @@protoc_insertion_point(field_get:kea.ContextMsg.requestAddr)
  return requestaddr_;
}
inline void ContextMsg::set_requestaddr(::google::protobuf::uint32 value) {
  
  requestaddr_ = value;
  // @@protoc_insertion_point(field_set:kea.ContextMsg.requestAddr)
}

// optional string hostName = 6;
inline void ContextMsg::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContextMsg::hostname() const {
  // @@protoc_insertion_point(field_get:kea.ContextMsg.hostName)
  return hostname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContextMsg::set_hostname(const ::std::string& value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kea.ContextMsg.hostName)
}
inline void ContextMsg::set_hostname(const char* value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kea.ContextMsg.hostName)
}
inline void ContextMsg::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kea.ContextMsg.hostName)
}
inline ::std::string* ContextMsg::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:kea.ContextMsg.hostName)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContextMsg::release_hostname() {
  // @@protoc_insertion_point(field_release:kea.ContextMsg.hostName)
  
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContextMsg::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:kea.ContextMsg.hostName)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc
}  // namespace kea

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::kea::rpc::ContextMsg_RequestType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kea::rpc::ContextMsg_RequestType>() {
  return ::kea::rpc::ContextMsg_RequestType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_context_2eproto__INCLUDED
