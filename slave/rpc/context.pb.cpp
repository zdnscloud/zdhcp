// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: context.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "context.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace kea {
namespace rpc {

namespace {

const ::google::protobuf::Descriptor* ContextMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContextMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ContextMsg_RequestType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_context_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_context_2eproto() {
  protobuf_AddDesc_context_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "context.proto");
  GOOGLE_CHECK(file != NULL);
  ContextMsg_descriptor_ = file->message_type(0);
  static const int ContextMsg_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextMsg, requesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextMsg, subnetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextMsg, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextMsg, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextMsg, requestaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextMsg, hostname_),
  };
  ContextMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ContextMsg_descriptor_,
      ContextMsg::default_instance_,
      ContextMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(ContextMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextMsg, _is_default_instance_));
  ContextMsg_RequestType_descriptor_ = ContextMsg_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_context_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ContextMsg_descriptor_, &ContextMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_context_2eproto() {
  delete ContextMsg::default_instance_;
  delete ContextMsg_reflection_;
}

void protobuf_AddDesc_context_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_context_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rcontext.proto\022\003kea\"\352\001\n\nContextMsg\0220\n\013r"
    "equestType\030\001 \001(\0162\033.kea.ContextMsg.Reques"
    "tType\022\020\n\010subnetID\030\002 \001(\r\022\020\n\010clientID\030\003 \001("
    "\014\022\013\n\003mac\030\004 \001(\014\022\023\n\013requestAddr\030\005 \001(\r\022\020\n\010h"
    "ostName\030\006 \001(\t\"R\n\013RequestType\022\014\n\010Discover"
    "\020\000\022\013\n\007Request\020\001\022\013\n\007Release\020\002\022\013\n\007Decline\020"
    "\003\022\016\n\nConflictIP\020\004b\006proto3", 265);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "context.proto", &protobuf_RegisterTypes);
  ContextMsg::default_instance_ = new ContextMsg();
  ContextMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_context_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_context_2eproto {
  StaticDescriptorInitializer_context_2eproto() {
    protobuf_AddDesc_context_2eproto();
  }
} static_descriptor_initializer_context_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ContextMsg_RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContextMsg_RequestType_descriptor_;
}
bool ContextMsg_RequestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ContextMsg_RequestType ContextMsg::Discover;
const ContextMsg_RequestType ContextMsg::Request;
const ContextMsg_RequestType ContextMsg::Release;
const ContextMsg_RequestType ContextMsg::Decline;
const ContextMsg_RequestType ContextMsg::ConflictIP;
const ContextMsg_RequestType ContextMsg::RequestType_MIN;
const ContextMsg_RequestType ContextMsg::RequestType_MAX;
const int ContextMsg::RequestType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContextMsg::kRequestTypeFieldNumber;
const int ContextMsg::kSubnetIDFieldNumber;
const int ContextMsg::kClientIDFieldNumber;
const int ContextMsg::kMacFieldNumber;
const int ContextMsg::kRequestAddrFieldNumber;
const int ContextMsg::kHostNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContextMsg::ContextMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kea.ContextMsg)
}

void ContextMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ContextMsg::ContextMsg(const ContextMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kea.ContextMsg)
}

void ContextMsg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requesttype_ = 0;
  subnetid_ = 0u;
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestaddr_ = 0u;
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ContextMsg::~ContextMsg() {
  // @@protoc_insertion_point(destructor:kea.ContextMsg)
  SharedDtor();
}

void ContextMsg::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ContextMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContextMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContextMsg_descriptor_;
}

const ContextMsg& ContextMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_context_2eproto();
  return *default_instance_;
}

ContextMsg* ContextMsg::default_instance_ = NULL;

ContextMsg* ContextMsg::New(::google::protobuf::Arena* arena) const {
  ContextMsg* n = new ContextMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContextMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:kea.ContextMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ContextMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ContextMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(requesttype_, subnetid_);
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestaddr_ = 0u;
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ContextMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kea.ContextMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kea.ContextMsg.RequestType requestType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_requesttype(static_cast< ::kea::rpc::ContextMsg_RequestType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_subnetID;
        break;
      }

      // optional uint32 subnetID = 2;
      case 2: {
        if (tag == 16) {
         parse_subnetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subnetid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_clientID;
        break;
      }

      // optional bytes clientID = 3;
      case 3: {
        if (tag == 26) {
         parse_clientID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clientid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mac;
        break;
      }

      // optional bytes mac = 4;
      case 4: {
        if (tag == 34) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mac()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_requestAddr;
        break;
      }

      // optional uint32 requestAddr = 5;
      case 5: {
        if (tag == 40) {
         parse_requestAddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestaddr_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_hostName;
        break;
      }

      // optional string hostName = 6;
      case 6: {
        if (tag == 50) {
         parse_hostName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kea.ContextMsg.hostName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kea.ContextMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kea.ContextMsg)
  return false;
#undef DO_
}

void ContextMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kea.ContextMsg)
  // optional .kea.ContextMsg.RequestType requestType = 1;
  if (this->requesttype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->requesttype(), output);
  }

  // optional uint32 subnetID = 2;
  if (this->subnetid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->subnetid(), output);
  }

  // optional bytes clientID = 3;
  if (this->clientid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->clientid(), output);
  }

  // optional bytes mac = 4;
  if (this->mac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->mac(), output);
  }

  // optional uint32 requestAddr = 5;
  if (this->requestaddr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->requestaddr(), output);
  }

  // optional string hostName = 6;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kea.ContextMsg.hostName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->hostname(), output);
  }

  // @@protoc_insertion_point(serialize_end:kea.ContextMsg)
}

::google::protobuf::uint8* ContextMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kea.ContextMsg)
  // optional .kea.ContextMsg.RequestType requestType = 1;
  if (this->requesttype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->requesttype(), target);
  }

  // optional uint32 subnetID = 2;
  if (this->subnetid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->subnetid(), target);
  }

  // optional bytes clientID = 3;
  if (this->clientid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->clientid(), target);
  }

  // optional bytes mac = 4;
  if (this->mac().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->mac(), target);
  }

  // optional uint32 requestAddr = 5;
  if (this->requestaddr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->requestaddr(), target);
  }

  // optional string hostName = 6;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kea.ContextMsg.hostName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->hostname(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kea.ContextMsg)
  return target;
}

int ContextMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:kea.ContextMsg)
  int total_size = 0;

  // optional .kea.ContextMsg.RequestType requestType = 1;
  if (this->requesttype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->requesttype());
  }

  // optional uint32 subnetID = 2;
  if (this->subnetid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->subnetid());
  }

  // optional bytes clientID = 3;
  if (this->clientid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->clientid());
  }

  // optional bytes mac = 4;
  if (this->mac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->mac());
  }

  // optional uint32 requestAddr = 5;
  if (this->requestaddr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestaddr());
  }

  // optional string hostName = 6;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContextMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kea.ContextMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ContextMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ContextMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kea.ContextMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kea.ContextMsg)
    MergeFrom(*source);
  }
}

void ContextMsg::MergeFrom(const ContextMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kea.ContextMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.requesttype() != 0) {
    set_requesttype(from.requesttype());
  }
  if (from.subnetid() != 0) {
    set_subnetid(from.subnetid());
  }
  if (from.clientid().size() > 0) {

    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  if (from.mac().size() > 0) {

    mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_);
  }
  if (from.requestaddr() != 0) {
    set_requestaddr(from.requestaddr());
  }
  if (from.hostname().size() > 0) {

    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
}

void ContextMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kea.ContextMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContextMsg::CopyFrom(const ContextMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kea.ContextMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContextMsg::IsInitialized() const {

  return true;
}

void ContextMsg::Swap(ContextMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContextMsg::InternalSwap(ContextMsg* other) {
  std::swap(requesttype_, other->requesttype_);
  std::swap(subnetid_, other->subnetid_);
  clientid_.Swap(&other->clientid_);
  mac_.Swap(&other->mac_);
  std::swap(requestaddr_, other->requestaddr_);
  hostname_.Swap(&other->hostname_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContextMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContextMsg_descriptor_;
  metadata.reflection = ContextMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContextMsg

// optional .kea.ContextMsg.RequestType requestType = 1;
void ContextMsg::clear_requesttype() {
  requesttype_ = 0;
}
 ::kea::rpc::ContextMsg_RequestType ContextMsg::requesttype() const {
  // @@protoc_insertion_point(field_get:kea.ContextMsg.requestType)
  return static_cast< ::kea::rpc::ContextMsg_RequestType >(requesttype_);
}
 void ContextMsg::set_requesttype(::kea::rpc::ContextMsg_RequestType value) {
  
  requesttype_ = value;
  // @@protoc_insertion_point(field_set:kea.ContextMsg.requestType)
}

// optional uint32 subnetID = 2;
void ContextMsg::clear_subnetid() {
  subnetid_ = 0u;
}
 ::google::protobuf::uint32 ContextMsg::subnetid() const {
  // @@protoc_insertion_point(field_get:kea.ContextMsg.subnetID)
  return subnetid_;
}
 void ContextMsg::set_subnetid(::google::protobuf::uint32 value) {
  
  subnetid_ = value;
  // @@protoc_insertion_point(field_set:kea.ContextMsg.subnetID)
}

// optional bytes clientID = 3;
void ContextMsg::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ContextMsg::clientid() const {
  // @@protoc_insertion_point(field_get:kea.ContextMsg.clientID)
  return clientid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContextMsg::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kea.ContextMsg.clientID)
}
 void ContextMsg::set_clientid(const char* value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kea.ContextMsg.clientID)
}
 void ContextMsg::set_clientid(const void* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kea.ContextMsg.clientID)
}
 ::std::string* ContextMsg::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:kea.ContextMsg.clientID)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ContextMsg::release_clientid() {
  // @@protoc_insertion_point(field_release:kea.ContextMsg.clientID)
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContextMsg::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:kea.ContextMsg.clientID)
}

// optional bytes mac = 4;
void ContextMsg::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ContextMsg::mac() const {
  // @@protoc_insertion_point(field_get:kea.ContextMsg.mac)
  return mac_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContextMsg::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kea.ContextMsg.mac)
}
 void ContextMsg::set_mac(const char* value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kea.ContextMsg.mac)
}
 void ContextMsg::set_mac(const void* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kea.ContextMsg.mac)
}
 ::std::string* ContextMsg::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:kea.ContextMsg.mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ContextMsg::release_mac() {
  // @@protoc_insertion_point(field_release:kea.ContextMsg.mac)
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContextMsg::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:kea.ContextMsg.mac)
}

// optional uint32 requestAddr = 5;
void ContextMsg::clear_requestaddr() {
  requestaddr_ = 0u;
}
 ::google::protobuf::uint32 ContextMsg::requestaddr() const {
  // @@protoc_insertion_point(field_get:kea.ContextMsg.requestAddr)
  return requestaddr_;
}
 void ContextMsg::set_requestaddr(::google::protobuf::uint32 value) {
  
  requestaddr_ = value;
  // @@protoc_insertion_point(field_set:kea.ContextMsg.requestAddr)
}

// optional string hostName = 6;
void ContextMsg::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ContextMsg::hostname() const {
  // @@protoc_insertion_point(field_get:kea.ContextMsg.hostName)
  return hostname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContextMsg::set_hostname(const ::std::string& value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kea.ContextMsg.hostName)
}
 void ContextMsg::set_hostname(const char* value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kea.ContextMsg.hostName)
}
 void ContextMsg::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kea.ContextMsg.hostName)
}
 ::std::string* ContextMsg::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:kea.ContextMsg.hostName)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ContextMsg::release_hostname() {
  // @@protoc_insertion_point(field_release:kea.ContextMsg.hostName)
  
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContextMsg::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:kea.ContextMsg.hostName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc
}  // namespace kea

// @@protoc_insertion_point(global_scope)
