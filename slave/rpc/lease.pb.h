// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lease.proto

#ifndef PROTOBUF_lease_2eproto__INCLUDED
#define PROTOBUF_lease_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace kea {
namespace rpc {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_lease_2eproto();
void protobuf_AssignDesc_lease_2eproto();
void protobuf_ShutdownFile_lease_2eproto();

class LeaseResult;

// ===================================================================

class LeaseResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kea.LeaseResult) */ {
 public:
  LeaseResult();
  virtual ~LeaseResult();

  LeaseResult(const LeaseResult& from);

  inline LeaseResult& operator=(const LeaseResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaseResult& default_instance();

  void Swap(LeaseResult* other);

  // implements Message ----------------------------------------------

  inline LeaseResult* New() const { return New(NULL); }

  LeaseResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LeaseResult& from);
  void MergeFrom(const LeaseResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LeaseResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool succeed = 1;
  void clear_succeed();
  static const int kSucceedFieldNumber = 1;
  bool succeed() const;
  void set_succeed(bool value);

  // optional uint32 addr = 2;
  void clear_addr();
  static const int kAddrFieldNumber = 2;
  ::google::protobuf::uint32 addr() const;
  void set_addr(::google::protobuf::uint32 value);

  // optional uint32 subnetID = 3;
  void clear_subnetid();
  static const int kSubnetIDFieldNumber = 3;
  ::google::protobuf::uint32 subnetid() const;
  void set_subnetid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:kea.LeaseResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  bool succeed_;
  ::google::protobuf::uint32 addr_;
  ::google::protobuf::uint32 subnetid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lease_2eproto();
  friend void protobuf_AssignDesc_lease_2eproto();
  friend void protobuf_ShutdownFile_lease_2eproto();

  void InitAsDefaultInstance();
  static LeaseResult* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LeaseResult

// optional bool succeed = 1;
inline void LeaseResult::clear_succeed() {
  succeed_ = false;
}
inline bool LeaseResult::succeed() const {
  // @@protoc_insertion_point(field_get:kea.LeaseResult.succeed)
  return succeed_;
}
inline void LeaseResult::set_succeed(bool value) {
  
  succeed_ = value;
  // @@protoc_insertion_point(field_set:kea.LeaseResult.succeed)
}

// optional uint32 addr = 2;
inline void LeaseResult::clear_addr() {
  addr_ = 0u;
}
inline ::google::protobuf::uint32 LeaseResult::addr() const {
  // @@protoc_insertion_point(field_get:kea.LeaseResult.addr)
  return addr_;
}
inline void LeaseResult::set_addr(::google::protobuf::uint32 value) {
  
  addr_ = value;
  // @@protoc_insertion_point(field_set:kea.LeaseResult.addr)
}

// optional uint32 subnetID = 3;
inline void LeaseResult::clear_subnetid() {
  subnetid_ = 0u;
}
inline ::google::protobuf::uint32 LeaseResult::subnetid() const {
  // @@protoc_insertion_point(field_get:kea.LeaseResult.subnetID)
  return subnetid_;
}
inline void LeaseResult::set_subnetid(::google::protobuf::uint32 value) {
  
  subnetid_ = value;
  // @@protoc_insertion_point(field_set:kea.LeaseResult.subnetID)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace kea

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lease_2eproto__INCLUDED
