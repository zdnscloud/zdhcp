// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lease.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lease.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace kea {
namespace rpc {

namespace {

const ::google::protobuf::Descriptor* LeaseResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaseResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_lease_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_lease_2eproto() {
  protobuf_AddDesc_lease_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lease.proto");
  GOOGLE_CHECK(file != NULL);
  LeaseResult_descriptor_ = file->message_type(0);
  static const int LeaseResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaseResult, succeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaseResult, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaseResult, subnetid_),
  };
  LeaseResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LeaseResult_descriptor_,
      LeaseResult::default_instance_,
      LeaseResult_offsets_,
      -1,
      -1,
      -1,
      sizeof(LeaseResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaseResult, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaseResult, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lease_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LeaseResult_descriptor_, &LeaseResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lease_2eproto() {
  delete LeaseResult::default_instance_;
  delete LeaseResult_reflection_;
}

void protobuf_AddDesc_lease_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_lease_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013lease.proto\022\003kea\">\n\013LeaseResult\022\017\n\007suc"
    "ceed\030\001 \001(\010\022\014\n\004addr\030\002 \001(\r\022\020\n\010subnetID\030\003 \001"
    "(\rb\006proto3", 90);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lease.proto", &protobuf_RegisterTypes);
  LeaseResult::default_instance_ = new LeaseResult();
  LeaseResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lease_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lease_2eproto {
  StaticDescriptorInitializer_lease_2eproto() {
    protobuf_AddDesc_lease_2eproto();
  }
} static_descriptor_initializer_lease_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaseResult::kSucceedFieldNumber;
const int LeaseResult::kAddrFieldNumber;
const int LeaseResult::kSubnetIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaseResult::LeaseResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kea.LeaseResult)
}

void LeaseResult::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LeaseResult::LeaseResult(const LeaseResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kea.LeaseResult)
}

void LeaseResult::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  succeed_ = false;
  addr_ = 0u;
  subnetid_ = 0u;
}

LeaseResult::~LeaseResult() {
  // @@protoc_insertion_point(destructor:kea.LeaseResult)
  SharedDtor();
}

void LeaseResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaseResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaseResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaseResult_descriptor_;
}

const LeaseResult& LeaseResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lease_2eproto();
  return *default_instance_;
}

LeaseResult* LeaseResult::default_instance_ = NULL;

LeaseResult* LeaseResult::New(::google::protobuf::Arena* arena) const {
  LeaseResult* n = new LeaseResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeaseResult::Clear() {
// @@protoc_insertion_point(message_clear_start:kea.LeaseResult)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LeaseResult, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LeaseResult*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(succeed_, subnetid_);

#undef ZR_HELPER_
#undef ZR_

}

bool LeaseResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kea.LeaseResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool succeed = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_addr;
        break;
      }

      // optional uint32 addr = 2;
      case 2: {
        if (tag == 16) {
         parse_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addr_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_subnetID;
        break;
      }

      // optional uint32 subnetID = 3;
      case 3: {
        if (tag == 24) {
         parse_subnetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subnetid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kea.LeaseResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kea.LeaseResult)
  return false;
#undef DO_
}

void LeaseResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kea.LeaseResult)
  // optional bool succeed = 1;
  if (this->succeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succeed(), output);
  }

  // optional uint32 addr = 2;
  if (this->addr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->addr(), output);
  }

  // optional uint32 subnetID = 3;
  if (this->subnetid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->subnetid(), output);
  }

  // @@protoc_insertion_point(serialize_end:kea.LeaseResult)
}

::google::protobuf::uint8* LeaseResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kea.LeaseResult)
  // optional bool succeed = 1;
  if (this->succeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succeed(), target);
  }

  // optional uint32 addr = 2;
  if (this->addr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->addr(), target);
  }

  // optional uint32 subnetID = 3;
  if (this->subnetid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->subnetid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kea.LeaseResult)
  return target;
}

int LeaseResult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:kea.LeaseResult)
  int total_size = 0;

  // optional bool succeed = 1;
  if (this->succeed() != 0) {
    total_size += 1 + 1;
  }

  // optional uint32 addr = 2;
  if (this->addr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->addr());
  }

  // optional uint32 subnetID = 3;
  if (this->subnetid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->subnetid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaseResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kea.LeaseResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LeaseResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaseResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kea.LeaseResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kea.LeaseResult)
    MergeFrom(*source);
  }
}

void LeaseResult::MergeFrom(const LeaseResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kea.LeaseResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.succeed() != 0) {
    set_succeed(from.succeed());
  }
  if (from.addr() != 0) {
    set_addr(from.addr());
  }
  if (from.subnetid() != 0) {
    set_subnetid(from.subnetid());
  }
}

void LeaseResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kea.LeaseResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaseResult::CopyFrom(const LeaseResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kea.LeaseResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseResult::IsInitialized() const {

  return true;
}

void LeaseResult::Swap(LeaseResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaseResult::InternalSwap(LeaseResult* other) {
  std::swap(succeed_, other->succeed_);
  std::swap(addr_, other->addr_);
  std::swap(subnetid_, other->subnetid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeaseResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaseResult_descriptor_;
  metadata.reflection = LeaseResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeaseResult

// optional bool succeed = 1;
void LeaseResult::clear_succeed() {
  succeed_ = false;
}
 bool LeaseResult::succeed() const {
  // @@protoc_insertion_point(field_get:kea.LeaseResult.succeed)
  return succeed_;
}
 void LeaseResult::set_succeed(bool value) {
  
  succeed_ = value;
  // @@protoc_insertion_point(field_set:kea.LeaseResult.succeed)
}

// optional uint32 addr = 2;
void LeaseResult::clear_addr() {
  addr_ = 0u;
}
 ::google::protobuf::uint32 LeaseResult::addr() const {
  // @@protoc_insertion_point(field_get:kea.LeaseResult.addr)
  return addr_;
}
 void LeaseResult::set_addr(::google::protobuf::uint32 value) {
  
  addr_ = value;
  // @@protoc_insertion_point(field_set:kea.LeaseResult.addr)
}

// optional uint32 subnetID = 3;
void LeaseResult::clear_subnetid() {
  subnetid_ = 0u;
}
 ::google::protobuf::uint32 LeaseResult::subnetid() const {
  // @@protoc_insertion_point(field_get:kea.LeaseResult.subnetID)
  return subnetid_;
}
 void LeaseResult::set_subnetid(::google::protobuf::uint32 value) {
  
  subnetid_ = value;
  // @@protoc_insertion_point(field_set:kea.LeaseResult.subnetID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace kea

// @@protoc_insertion_point(global_scope)
